package com.github.zastai.apiref.formatters;

import com.github.zastai.apiref.model.JavaApplication;
import com.github.zastai.apiref.model.JavaClass;
import com.github.zastai.apiref.model.JavaPackage;
import org.jetbrains.annotations.NotNull;

import java.io.PrintStream;

/** A class for formatting a Java application's (public) API as MarkDown (with Java pseudocode blocks). */
public class MarkDownFormatter extends JavaFormatter {

  protected MarkDownFormatter(@NotNull PrintStream out) {
    super(out);
  }

  /**
   * Formats the public API for a Java application as MarkDown (with Java pseudocode blocks) and writes it to the specified stream.
   *
   * @param out         The stream to write the public API to.
   * @param application The application whose public API should be formatted.
   */
  public static void formatPublicApi(@NotNull PrintStream out, @NotNull JavaApplication application) {
    final var formatter = new MarkDownFormatter(out);
    formatter.writePublicApi(application);
  }

  @Override
  protected void writeFileHeader() {
    this.out.println("# Java API Reference");
    this.out.println();
    this.out.println("This file is automatically generated by a tool. Do not edit it by hand.");
  }

  @Override
  protected void writeClassFooter(@NotNull JavaClass jc) {
    super.writeClassFooter(jc);
    if (jc.parent.parentType == null) {
      this.out.println("```");
    }
  }

  @Override
  protected void writeClassHeader(@NotNull JavaClass jc) {
    if (jc.parent.parentType == null) {
      this.out.printf("### Class: %s", jc.name);
      if (jc.parent.classes.size() > 1) {
        this.out.printf(" (targeting JDK %s)", jc.runtimeVersion());
      }
      this.out.println();
      this.out.println();
      this.out.println("```java");
    }
    super.writeClassHeader(jc);
  }

  @Override
  protected void writePackageFooter(@NotNull JavaPackage jp) {
  }

  @Override
  protected void writePackageHeader(@NotNull JavaPackage jp) {
    this.out.print("## Package: ");
    this.writePackageName(jp);
    this.out.println();
    if (jp.info != null) {
      this.out.println();
      this.out.println("```java");
      super.writePackageHeader(jp);
      super.writePackageFooter(jp);
      this.out.println("```");
    }
  }

}
